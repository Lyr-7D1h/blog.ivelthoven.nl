{"version":3,"sources":["helpers/requestor.js","helpers/notification.js","components/DateSider.js","components/Nav.js","components/BlogCard.js","components/SubNav.js","components/BlogForm.js","pages/HomePage.js","pages/ProjectsPage.js","components/LoginForm.js","pages/AdminPage.js","App.js","serviceWorker.js","index.js"],"names":["method","route","data","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","status","responseText","JSON","parse","err","Error","statusText","open","baseUrl","setRequestHeader","withCredentials","send","stringify","message","description","notification","SubMenu","Menu","Sider","Layout","dates","monthNames","years","months","forEach","date","indexOf","getFullYear","push","getMonth","width","style","background","mode","defaultSelectedKeys","defaultOpenKeys","height","borderRight","map","year","yearIndex","key","title","type","month","monthIndex","Item","Header","selected","className","lineHeight","float","theme","disabled","to","Content","name","blog","padding","margin","minHeight","items","display","paddingLeft","index","Option","Select","TextArea","Input","Form","create","categories","form","getFieldDecorator","onSubmit","e","preventDefault","validateFields","values","console","log","requestor","then","catch","rules","required","placeholder","i","value","id","rows","htmlType","block","useState","blogs","setBlogs","setCategories","categoryNames","setCategoryNames","loggedIn","setLoggedIn","useEffect","Cookies","get","category","Nav","DateSider","Date","SubNav","BlogCard","props","prefix","color","isVisible","setIsVisible","visible","onCancel","okButtonProps","cancelButtonProps","LoginForm","username","password","set","path","btoa","App","exact","component","HomePage","ProjectsPage","AdminPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce82dc89.chunk.js","sourcesContent":["import { baseUrl } from \"../config.json\";\n\nexport default (method, route, data) => {\n  return new Promise((resolve, reject) => {\n    var xhr = new XMLHttpRequest();\n    xhr.addEventListener(\"load\", () => {\n      if (xhr.status === 200) {\n        if (xhr.responseText) {\n          try {\n            const data = JSON.parse(xhr.responseText);\n            resolve(data);\n          } catch (err) {\n            reject(err);\n          }\n        }\n      }\n      reject(new Error(`Request failed with Code: ${xhr.statusText}`));\n    });\n\n    xhr.open(method, baseUrl + route);\n\n    if (method === \"POST\") {\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.withCredentials = true;\n\n      xhr.send(JSON.stringify(data));\n    } else {\n      xhr.send();\n    }\n  });\n};\n","import { notification } from \"antd\";\n\nconst error = (message, description) => {\n  notification[\"error\"]({\n    message: message,\n    description: description\n  });\n};\n\nconst success = (message, description) => {\n  notification[\"success\"]({\n    message: message,\n    description: description\n  });\n};\n\nexport default { error, success };\n","import React from \"react\";\nimport { Menu, Icon, Layout } from \"antd\";\n\nconst { SubMenu } = Menu;\nconst { Sider } = Layout;\n\nexport default ({ dates }) => {\n  var monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n  ];\n  const years = [];\n  const months = [];\n  dates.forEach(date => {\n    !(years.indexOf(date.getFullYear()) === -1) ||\n      years.push(date.getFullYear());\n\n    !(months.indexOf(date.getMonth()) === -1) || months.push(date.getMonth());\n  });\n\n  return (\n    <Sider width={200} style={{ background: \"#fff\" }}>\n      <Menu\n        mode=\"inline\"\n        defaultSelectedKeys={[\"1\"]}\n        defaultOpenKeys={[\"sub1\"]}\n        style={{ height: \"100%\", borderRight: 0 }}\n      >\n        {years.map((year, yearIndex) => (\n          <SubMenu\n            key=\"index\"\n            title={\n              <span>\n                <Icon type=\"snippets\" />\n                {year}\n              </span>\n            }\n          >\n            {months.map((month, monthIndex) => (\n              <Menu.Item key={monthIndex}>{monthNames[month]}</Menu.Item>\n            ))}\n          </SubMenu>\n        ))}\n      </Menu>\n    </Sider>\n  );\n};\n","import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nconst { Header } = Layout;\n\nexport default ({ selected }) => {\n  return (\n    <Header>\n      <div className=\"logo\" />\n      <Menu\n        mode=\"horizontal\"\n        defaultSelectedKeys={[selected]}\n        style={{ lineHeight: \"64px\", float: \"left\" }}\n        theme=\"dark\"\n      >\n        <Menu.Item disabled>\n          <b>BLOG.IVELTHOVEN.NL</b>\n        </Menu.Item>\n\n        <Menu.Item key=\"1\">\n          <Link to=\"/\">Blog</Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n          <Link to=\"/projects\">Projects</Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n          <Link to=\"/learning\">Learning Tree</Link>\n        </Menu.Item>\n      </Menu>\n    </Header>\n  );\n};\n","import React from \"react\";\nimport { Layout } from \"antd\";\n\nconst { Content } = Layout;\n\nexport default ({ blog: { name } }) => {\n  return (\n    <Content\n      style={{\n        background: \"#fff\",\n        padding: 24,\n        margin: 0,\n        minHeight: 280\n      }}\n    >\n      {\" \"}\n      {name}{\" \"}\n    </Content>\n  );\n};\n","import React from \"react\";\nimport { Menu } from \"antd\";\n\nexport default ({ items }) => {\n  return (\n    <Menu\n      mode=\"horizontal\"\n      defaultSelectedKeys={\"-1\"}\n      style={{\n        lineHeight: \"50px\",\n        float: \"center\",\n        display: \"inline\",\n        paddingLeft: \"20px\"\n      }}\n      theme=\"light\"\n    >\n      {items.map((name, index) => (\n        <Menu.Item key={index}>{name}</Menu.Item>\n      ))}\n    </Menu>\n  );\n};\n","import React from \"react\";\nimport requestor from \"../helpers/requestor\";\nimport notification from \"../helpers/notification\";\nimport { Form, Input, Button, Select } from \"antd\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst BlogForm = ({ categories, form, onSubmit }) => {\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n\n  //   form.validateFields((err, values) => {\n  //     if (!err) {\n  //       onSubmit(values);\n  //     }\n  //   });\n  // };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      console.log(values);\n      if (!err) {\n        requestor(\"POST\", \"blog\", values)\n          .then(() => {\n            notification.success(\"Created\");\n          })\n          .catch(err => {\n            notification.error(\"Could not create\", err.message);\n          });\n      }\n    });\n  };\n\n  const { getFieldDecorator } = form;\n  return (\n    <Form onSubmit={handleSubmit} className=\"login-form\">\n      <Form.Item>\n        {getFieldDecorator(\"title\", {\n          rules: [{ required: true }]\n        })(<Input type=\"text\" placeholder=\"Title\" />)}\n      </Form.Item>\n\n      <Form.Item>\n        {getFieldDecorator(\"category\", {\n          rules: [{ required: true }]\n        })(\n          <Select mode=\"multiple\" placeholder=\"Category\">\n            {categories.map((categories, i) => (\n              <Option value={categories.id} key={i}>\n                {categories.name}\n              </Option>\n            ))}\n          </Select>\n        )}\n      </Form.Item>\n\n      <Form.Item>\n        {getFieldDecorator(\"content\", {\n          rules: [{ required: true }]\n        })(<TextArea placeholder=\"Content\" rows=\"10\" />)}\n      </Form.Item>\n\n      <Form.Item>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          className=\"login-form-button\"\n          block\n        >\n          Create\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default Form.create({ name: \"blog_form\" })(BlogForm);\n","import React, { useState, useEffect } from \"react\";\nimport requestor from \"../helpers/requestor\";\nimport notification from \"../helpers/notification\";\nimport { Layout } from \"antd\";\nimport Cookies from \"js-cookie\";\n\nimport DateSider from \"../components/DateSider\";\nimport Nav from \"../components/Nav\";\nimport BlogCard from \"../components/BlogCard\";\nimport SubNav from \"../components/SubNav\";\nimport BlogForm from \"../components/BlogForm\";\n\nexport default () => {\n  const [blogs, setBlogs] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [categoryNames, setCategoryNames] = useState([]);\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  useEffect(() => {\n    setLoggedIn(Cookies.get(\"loggedIn\"));\n\n    requestor(\"GET\", \"blog/category\")\n      .then(data => {\n        setCategoryNames(data.map(category => category.name));\n        setCategories(data);\n      })\n      .catch(err => {\n        notification.error(\"Could not fetch Blogs\", err.message);\n      });\n\n    requestor(\"GET\", \"blog\")\n      .then(data => {\n        setBlogs(data);\n      })\n      .catch(err => {\n        notification.error(\"Could not fetch Blogs\", err.message);\n      });\n  }, []);\n\n  return (\n    <Layout>\n      <Nav selected=\"1\" />\n      <Layout>\n        <DateSider dates={[new Date(), new Date()]} />\n        <Layout>\n          <SubNav items={categoryNames} />\n          <div style={{ padding: \"24px 24px 24px\" }}>\n            {loggedIn && (\n              <Layout>\n                <BlogForm categories={categories} />\n              </Layout>\n            )}\n            CONTENT\n            {blogs && blogs.map((blog, i) => <BlogCard blog={blog} key={i} />)}\n          </div>\n        </Layout>\n      </Layout>\n    </Layout>\n  );\n};\n","import React from \"react\";\nimport { Layout } from \"antd\";\nimport Nav from \"../components/Nav\";\n\nexport default () => {\n  return (\n    <Layout>\n      <Nav selected=\"2\" />\n    </Layout>\n  );\n};\n","import React from \"react\";\nimport { Form, Icon, Input, Button } from \"antd\";\n\nconst AdminForm = props => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (!err) {\n        props.onSubmit(values);\n      }\n    });\n  };\n\n  const { getFieldDecorator } = props.form;\n  return (\n    <Form onSubmit={handleSubmit} className=\"login-form\">\n      <Form.Item>\n        {getFieldDecorator(\"username\", {\n          rules: [{ required: true, message: \"username pls\" }]\n        })(\n          <Input\n            prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n            placeholder=\"Username\"\n          />\n        )}\n      </Form.Item>\n      <Form.Item>\n        {getFieldDecorator(\"password\", {\n          rules: [{ required: true, message: \"pass pls\" }]\n        })(\n          <Input\n            prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n        )}\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          className=\"login-form-button\"\n          block\n        >\n          Log in\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default Form.create({ name: \"normal_login\" })(AdminForm);\n","import React, { useState } from \"react\";\nimport notification from \"../helpers/notification\";\nimport { Layout, Modal } from \"antd\";\nimport { Redirect } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\n\nimport Nav from \"../components/Nav\";\nimport LoginForm from \"../components/LoginForm\";\n\nimport { baseUrl } from \"../config.json\";\n\nexport default () => {\n  // const [categories, setCategories] = useState([]);\n  const [isVisible, setIsVisible] = useState(true);\n  // useEffect(() => {\n  //   requestor(\"GET\", \"blog/category\")\n  //     .then(categories => {\n  //       setCategories(categories);\n  //     })\n  //     .catch(err => {\n  //       notification.error(err.message);\n  //     });\n  // }, []);\n\n  // const postBlog = () => {};\n\n  const submitHandler = values => {\n    if (values.username && values.password) {\n      var xhr = new XMLHttpRequest();\n\n      xhr.addEventListener(\"load\", () => {\n        if (xhr.status === 200) {\n          Cookies.set(\"loggedIn\", true, { path: \"/\" });\n          notification.success(\"Logged In\");\n          setIsVisible(false);\n        } else {\n          notification.error(`Request failed`, `${xhr.statusText}`);\n        }\n      });\n\n      xhr.open(\"POST\", baseUrl + \"auth\", true);\n\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.setRequestHeader(\n        \"Authorization\",\n        \"Basic \" + btoa(`${values.username}:${values.password}`)\n      );\n      // xhr.setRequestHeader(`Access-Control-Allow-Credentials`, true);\n\n      xhr.withCredentials = true;\n      xhr.send();\n    }\n  };\n\n  return (\n    <Layout>\n      <Nav selected=\"-1\" />\n      <Layout>\n        <Modal\n          title=\"LOGIN\"\n          visible={isVisible}\n          onCancel={() => {\n            setIsVisible(false);\n          }}\n          okButtonProps={{ className: \"hidden\" }}\n          cancelButtonProps={{ className: \"hidden\" }}\n        >\n          <LoginForm onSubmit={submitHandler} />\n        </Modal>\n        {/* TODO: Create Admin Page */}\n        {isVisible || <Redirect to=\"/\" />}\n      </Layout>\n    </Layout>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport HomePage from \"./pages/HomePage\";\nimport ProjectsPage from \"./pages/ProjectsPage\";\nimport AdminPage from \"./pages/AdminPage\";\n\n// const supportsHistory = \"pushState\" in window.history;\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route exact path=\"/projects\" component={ProjectsPage} />\n        <Route exact path=\"/admin\" component={AdminPage} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}